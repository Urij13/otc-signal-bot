import re
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = 
def parse_signal(text):
    text = text.lower()

    direction = None
    if "‚¨Ü" in text or "–≤–≥–æ—Ä—É" in text or "–≤–≤–µ—Ä—Ö" in text or "up" in text or re.search(r'\^+', text):
        direction = "‚¨ÜÔ∏è"
    elif "‚¨á" in text or "–≤–Ω–∏–∑" in text or "down" in text or re.search(r'v+', text):
        direction = "‚¨áÔ∏è"

    match = re.search(r"([A-Z]{3}/[A-Z]{3})", text.upper())
    pair = match.group(1) if match else None

    return pair, direction

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ —Å–∏–≥–Ω–∞–ª (‚¨ÜÔ∏è –∞–±–æ ‚¨áÔ∏è) + –Ω–∞–∑–≤—É –ø–∞—Ä–∏.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    pair, direction = parse_signal(user_input)

    if pair and direction:
        await update.message.reply_text(f"‚úÖ –°–∏–≥–Ω–∞–ª –ø—Ä–∏–π–Ω—è—Ç–æ:\n–ü–∞—Ä–∞: {pair}\n–ù–∞–ø—Ä—è–º–æ–∫: {direction}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–∞–¥—ñ—à–ª–∏ —Å–∏–≥–Ω–∞–ª ‚¨ÜÔ∏è –∞–±–æ ‚¨áÔ∏è —Ä–∞–∑–æ–º –∑ –Ω–∞–∑–≤–æ—é –ø–∞—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: EUR/USD OTC ‚¨ÜÔ∏è)")

app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

app.run_polling()
